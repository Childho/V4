---
description: 微信小程序原生项目开发规范（最终平衡版）
globs: 
alwaysApply: true
---

# 项目通用规范（适用于微信小程序原生开发：wxml/wxss/js）

## 技术栈
- 使用微信小程序原生框架（wxml + wxss + js/json）。
- 不使用 Vue、React 等第三方框架，不用 Vant 组件库。
- 推荐使用微信官方UI组件（如button、input、image等）；如需自定义风格，基于官方组件二次封装。
- 数据管理采用全局 app 实例或本地缓存，**复杂业务可用自定义 store，但需提前在团队review通过后统一实现**。

## 项目结构
- 页面放在 /pages 目录，每个页面单独文件夹，含 wxml、wxss、js、json 四文件。
- 公共组件放在 /components 目录，优先复用，**如遇特殊需求可临时独立实现，但须在注释说明理由**。
- 公共方法、工具函数放 /utils 目录。
- 静态资源（图片、图标等）放 /assets 目录。
- 后端接口封装在 /api 目录（如有）。

## 全局事件
- 每次新建/修改文件需及时同步 @README.md 的项目结构说明，**团队内可指定专人定期review文档一致性**。
- 每完成一项功能开发需执行 git commit，简要描述本次更改内容（如 feat: 新增购物车页面）。
- **如赶进度可临时滞后文档，但每周需统一补齐，团队同步透明。**

## 全局限制
- 不允许在页面/组件 js 文件内直接定义测试数据，所有页面数据须来自后端服务或 mock 接口。
  - **如接口未就绪，允许短期用 mock 数据，需注释标明，页面验收或上线前必须切换为真实接口。**
- 禁止创建无用测试文档或冗余页面。
- 未经允许不得随意更改项目结构和目录命名。

## 项目结构规则
- **分层组织**：按功能/领域划分目录，关注点分离。前期业务单一时可适度简化结构，**后期随模块增多加强分层**。
- **命名一致**：页面、组件、资源、接口用小写字母+中划线（如：order-list，user-center）。变量、函数用小驼峰（如 productList，getUserInfo）。
- **模块化**：相关功能归同一模块，避免重复和跨模块依赖。**如业务创新或A/B测试可临时分离，需注释理由。**
- **嵌套适度**：目录嵌套不超3-4层，保持结构清晰，**如遇超出需提前团队review是否拆分。**
- **资源分类**：区分代码、静态资源、配置和工具方法。
- **依赖管理**：如有第三方库，统一在项目配置声明，避免重复引入。
- **约定优先**：遵循微信小程序官方项目结构约定。

## 通用开发原则
- **可测试性**：组件/页面保持单一职责，复杂功能注释清晰。**如需单元测试提前报备review。**
- **DRY 原则**：避免重复代码，公共逻辑提取到 utils/ 目录。**少量特殊case如需重复，务必注释理由。**
- **代码简洁**：保持代码可读明了，单函数/方法建议不超300行。**遇到复杂业务可酌情review分拆方案。**
- **命名规范**：见结构规则说明。
- **注释文档**：复杂逻辑和特殊流程要注释清晰，模块说明可写在js文件开头。
- **风格一致**：遵循官方代码风格，缩进、空格、分号等一致。
- **优先用生态**：优先微信官方API及组件，避免重复造轮子。
- **架构设计**：兼顾可维护性、可扩展性和性能。**如需大改架构须团队充分讨论评估。**
- **版本控制**：每次相关变更一次 commit，commit 信息有意义。
- **异常处理**：接口、业务逻辑均需异常处理（如Toast提示），复杂异常可用工具函数统一。

## UI与样式
- 遵循品牌主色、字号、圆角等统一风格，**核心视觉不可随意更改**。
- 页面如遇特殊活动/促销，可局部指定样式，**需注释说明且不影响整体一致性**。

## 响应语言
- 始终用中文回复用户和团队成员。

## AI协作与例外
- 规则如遇特殊项目需求可临时调整，需全员知晓并在本规范顶部标注临时变化说明，待迭代结束回归主规范。

---

