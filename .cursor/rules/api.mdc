---
description: 
globs: miniprogram/api/*.js,miniprogram/api/*.ts
alwaysApply: false
---
**入参要求**
   - header中必须设置 auth， 值为当前登录后保存的token值
   - 请求的参数使用json 格式， 就算是参数为空，也需要使用 {} 来代替
**HTTP 请求**
- 请求方式默认 `POST`，可选 `'GET'`
**返参格式**
/** 后端返回的通用接口格式 */
export interface ApiResponse<T> {
  error: number;   // 0=成功，500=系统异常，401=未登录，其他=业务异常
  body: T;         // 业务数据对象
  message: string; // 错误或提示信息
}

/** 常见错误码枚举 */
export enum ApiErrorCode {
  SUCCESS = 0,
  SYSTEM = 500,
  UNAUTHORIZED = 401
}
**通用请求函数**
import { ApiResponse, ApiErrorCode } from './types';

export async function apiRequest<T>(
  url: string,
  data: object = {},
  method: 'GET' | 'POST' = 'POST'
): Promise<T> {
  const token = (wx.getStorageSync('token') as string) || '';
  const res = await wx.request<ApiResponse<T>>({
    url,
    method,
    data,
    header: { auth: token }
  });
  const { error, body, message } = res.data;
  switch (error) {
    case ApiErrorCode.SUCCESS:
      return body;
    case ApiErrorCode.SYSTEM:
      wx.showToast({ title: '系统异常', icon: 'none' });
      throw new Error('系统异常');
    case ApiErrorCode.UNAUTHORIZED:
      wx.showToast({ title: '请先登录', icon: 'none' });
      wx.navigateTo({ url: '/pages/login/login' });
      throw new Error('未登录');
    default:
      wx.showToast({ title: message, icon: 'none' });
      throw new Error(message);
  }
}
**通用请求函数**
import { apiRequest } from './request';

export interface LoginResult {
  token: string;
  userId: number;
}

export function login(params: {
  username: string;
  password: string;
}): Promise<LoginResult> {
  return apiRequest<LoginResult>('/api/user/login', params);
}
